{"version":3,"file":"static/webpack/static/development/pages/_app.js.289b84b64c27c26ee998.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n} from '../reducers/user';\n/*\n\n-사가 yield 이펙트 정리-\nnext : 따로 작성할 필요없고 사가가 알아서 이펙트가 실행될 때 마다 해줌\ntake : 다른 사가를 기다림.\ntakeLatest :  해당 사가 실행완료 될때 까지 기다렸다가 액션 실행\nput: 사가의 dispatch\nfork : 함수를 실행해줌 (비동기호출)\ncall : 함수를 실행해줌 (동기 호출 ex)콜백 로직이 중요한 로그인 로직 )\n\n**\n 사가 구성 3종 세트\n api 콜 함수 - 실행(실제 동작) 함수 - watch 함수\n**\n\n*/\n\n/*\n로그인\n*/\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof(loginData)); // 데이터타입 object 반환\n  console.log(\"saga -callapi : \" + JSON.stringify(loginData)); //스트링 반환\n  return axios.post('//localhost:3065/api/user/login', loginData, {\n    withCredentials: true, //!!! 쿠키를 받기 위해 반드시 세팅해야\n  });\n}\n\n\nfunction* login(action) {\n  try {\n    console.log('saga - login() :' + action.type);\n    yield delay(1000);\n    const result = yield call(loginAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data // result 내부에 있는 데이터\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n    });\n  }\n}\n//로그인이라는 액션을 기다리고\n//LOG_IN 이라는 타입으 액션이 실행될때까지 기다렸다가 login 함수 실행\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n\n/*\n회원가입\n*/\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof(signUpData)); // 데이터타입 object 반환\n  console.log(\"saga -callapi : \" + JSON.stringify(signUpData)); //스트링 반환\n  return axios.post('http://localhost:3065/api/user/', signUpData); //api 주소\n}\n\nfunction* signUp(action) {\n\n  try {\n    // yield call(signUpAPI);\n    console.log(\"saga -signup action : \" + action.type); //타입반환\n    console.log(\"saga -signup action : \" + action.data);\n    yield call(signUpAPI, action.data); //sinUpAPI함수에 action.data를 인자로 넣는다.\n    //throw new Error('에러!'); //일부러 에러내기\n    yield put({ // put = dispatch\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\n\n\n/*\n로그아웃\n*/\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction* logout(action) {\n  try {\n    console.log('saga - login() :' + action.type);\n    yield delay(1000);\n    const result = yield call(logoutAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS,\n      data: result.data // result 내부에 있는 데이터\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n    });\n  }\n}\n\nfunction logoutAPI() {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : logout\");\n  return axios.post('//localhost:3065/api/user/logout', {}, {//데이터가 없어도 빈갯\n    withCredentials: true, //!!! 쿠키를 받기 위해 반드시 세팅해야\n  });\n}\n/*\n쿠키를 통해 유저정보 불러오기\n*/\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* loadUser(action) {\n  try {\n    console.log(\"saga -callapi : loadUser\");\n    const result = yield call(loadUserAPI, action.data); //sinUpAPI함수에 action.data를 인자로 넣는다.\n    //throw new Error('에러!'); //일부러 에러내기\n    yield put({ // put = dispatch\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n    console.log(result.data);\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadUserAPI() {\n    return axios.get('http://localhost:3065/api/user/', {\n        withCredentials: true // 쿠키를 받기 위\n    }); //get은 데이터를 보내지 않음\n}\n\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n    fork(watchLogout),\n    fork(watchLoadUser),\n    fork(watchSignUp),\n  ]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;AAkBA;;;AAQA;;;AAUA;;;AAyBA;;;AAIA;;;AA4BA;;;AAIA;;;AA0BA;AACA;AA1KA;AACA;AACA;AAcA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAGA;AACA;AAJA;AAAA;AAIA;AACA;AALA;AAIA;AAJA;AAKA;AAAA;AACA;AACA;AACA;AAHA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AAVA;AAWA;AACA;AADA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AALA;AAMA;AACA;AAPA;AAAA;AAQA;AAAA;AACA;AADA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAWA;AACA;AAZA;AAaA;AACA;AACA;AAFA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAGA;AACA;AAJA;AAAA;AAIA;AACA;AALA;AAIA;AAJA;AAKA;AAAA;AACA;AACA;AACA;AAHA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AAVA;AAWA;AACA;AADA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAGA;AACA;AAJA;AAGA;AAHA;AAKA;AAAA;AACA;AACA;AAFA;AACA;AANA;AASA;AATA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAXA;AAYA;AACA;AACA;AAFA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AAFA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}