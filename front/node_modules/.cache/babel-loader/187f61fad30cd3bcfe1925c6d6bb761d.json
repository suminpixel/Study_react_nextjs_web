{"ast":null,"code":"var _jsxFileName = \"/Users/suminlee/PhpstormProjects/reactSNS/front/pages/_app.js\";\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n/*\n\n_app.js :\n\nnextjs가 가장 처음 뿌려주는 루트 페이지\n스토어 프로바이더 세팅,\n미들웨어 세팅등을 여기서 한다.\n인덱스.js를 뿌려준다.\n\n----모르으면 외워서 쓸것--------\nstore 연결\nmiddleware (rootSaga) 연결 등을 한다.\n-----------------------------\n\n*/\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store;\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"NodeBird\"), React.createElement(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Component, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired\n}; //리덕스 스토어 세팅 (리덕스 사가 세팅 + 리덕스와 해당 스토어을 연결) !!! 그냥 외울것\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware(); //리덕스 미들웨어 정의 (리덕스에 없는 기능을 추가하고 싶을 때) ex)리덕스 데브 툴즈\n\n  var middlewares = [sagaMiddleware]; //여러 미들웨어 끼리 합성(compose) !!! 그냥 외울것\n  //실제 서비스에서는 노출하지 말것\n\n  var enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  }); //루트스토어의 리듀서를 넣어줄 것\n\n  var store = createStore(reducer, initialState, enhancer); //이 위치에 스토어 커스터마이징 가능\n  //루트사가 run\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n}; //withDedux(props)리액트에 리덕스 스토어를 연결해줌 !!! 그냥 외울것\n\n\nexport default withRedux()(configureStore);","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/pages/_app.js"],"names":["React","Head","PropTypes","withRedux","applyMiddleware","compose","createStore","Provider","createSagaMiddleware","AppLayout","reducer","rootSaga","NodeBird","Component","store","propTypes","elementType","isRequired","object","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA;;;;;;;;;;;;;;;;AAgBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA0B;AAAA,MAAvBC,SAAuB,QAAvBA,SAAuB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACzC,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,6DAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CADF;AAWD,CAZD;;AAcAF,QAAQ,CAACG,SAAT,GAAqB;AACnBF,EAAAA,SAAS,EAAEX,SAAS,CAACc,WAAV,CAAsBC,UADd;AAEnBH,EAAAA,KAAK,EAAEZ,SAAS,CAACgB,MAAV,CAAiBD;AAFL,CAArB,C,CAKA;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAAyB;AAC5C,MAAMC,cAAc,GAAGd,oBAAoB,EAA3C,CAD4C,CAE5C;;AACA,MAAMe,WAAW,GAAG,CAACD,cAAD,CAApB,CAH4C,CAI5C;AACA;;AACA,MAAME,QAAQ,GACVC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACKtB,OAAO,CAACD,eAAe,MAAf,SAAmBmB,WAAnB,CAAD,CADZ,GAEKlB,OAAO,CAACD,eAAe,MAAf,SAAmBmB,WAAnB,CAAD,EACR,OAAOK,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,4BAAP,KAAwC,WAAzE,GAAuFD,MAAM,CAACC,4BAAP,EAAvF,GAA+H,UAACC,CAAD;AAAA,WAAOA,CAAP;AAAA,GADvH,CAHhB,CAN4C,CAa5C;;AACA,MAAMhB,KAAK,GAAGR,WAAW,CAACI,OAAD,EAAUU,YAAV,EAAwBI,QAAxB,CAAzB,CAd4C,CAe5C;AACA;;AACAF,EAAAA,cAAc,CAACS,GAAf,CAAmBpB,QAAnB;AACA,SAAOG,KAAP;AACH,CAnBD,C,CAqBA;;;AACA,eAAeX,SAAS,GAAGgB,cAAH,CAAxB","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\n/*\n\n_app.js :\n\nnextjs가 가장 처음 뿌려주는 루트 페이지\n스토어 프로바이더 세팅,\n미들웨어 세팅등을 여기서 한다.\n인덱스.js를 뿌려준다.\n\n----모르으면 외워서 쓸것--------\nstore 연결\nmiddleware (rootSaga) 연결 등을 한다.\n-----------------------------\n\n*/\n\nconst NodeBird = ({ Component, store }) => {\n  return (\n    <Provider store={store}>\n      <Head>\n        <title>NodeBird</title>\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\n      </Head>\n      <AppLayout>\n        <Component />\n      </AppLayout>\n    </Provider>\n  );\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n};\n\n//리덕스 스토어 세팅 (리덕스 사가 세팅 + 리덕스와 해당 스토어을 연결) !!! 그냥 외울것\nconst configureStore = (initialState, options)=>{\n    const sagaMiddleware = createSagaMiddleware();\n    //리덕스 미들웨어 정의 (리덕스에 없는 기능을 추가하고 싶을 때) ex)리덕스 데브 툴즈\n    const middlewares = [sagaMiddleware];\n    //여러 미들웨어 끼리 합성(compose) !!! 그냥 외울것\n    //실제 서비스에서는 노출하지 말것\n    const enhancer =\n        process.env.NODE_ENV === 'production'\n            ?compose(applyMiddleware(...middlewares),)\n            :compose(applyMiddleware(...middlewares),\n            typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\n            );\n\n    //루트스토어의 리듀서를 넣어줄 것\n    const store = createStore(reducer, initialState, enhancer);\n    //이 위치에 스토어 커스터마이징 가능\n    //루트사가 run\n    sagaMiddleware.run(rootSaga);\n    return store;\n};\n\n//withDedux(props)리액트에 리덕스 스토어를 연결해줌 !!! 그냥 외울것\nexport default withRedux()(configureStore);\n"]},"metadata":{},"sourceType":"module"}