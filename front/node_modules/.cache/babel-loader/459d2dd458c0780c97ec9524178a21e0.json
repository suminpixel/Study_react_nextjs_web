{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest, call, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\n/*\n\n로그인 관련 사가 제너레이터\n\n-사가 이펙트 정리-\nnext : 따로 작성할 필요없고 사가가 알아서 이펙트가 실행될 때 마다 해줌\ntake : 다른 사가를 기다림.\ntakeLatest :  해당 사가 실행완료 될때 까지 기다렸다가 액션 실행\nput: 사가의 dispatch\nfork :\ncall :\n*/\n//서버에 로그인 요청\n\nfunction loginApi() {} //로그인 액션 실행\n\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginApi());\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          //서버 요청 실패시\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} //로그인이라는 액션을 기다리고\n//LOG_IN 이라는 타입으 액션이 실행될때까지 기다렸다가 login 함수 실\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n          _context2.next = 4;\n          return take(LOG_IN);\n\n        case 4:\n          _context2.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('hello saga - login.js');\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([watchLogin()]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/sagas/user.js"],"names":["login","watchLogin","helloSaga","userSaga","all","fork","put","takeLatest","call","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginApi","type","console","error","log"],"mappings":";;;;yBAqBUA,K;;;yBAkBAC,U;;;yBAQAC,S;;;yBAGeC,Q;;AAlDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,IAArC,EAA2CC,IAA3C,QAAsD,oBAAtD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA;;;;;;;;;;;;AAaA;;AACA,SAASC,QAAT,GAAoB,CAEnB,C,CACD;;;AACA,SAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMQ,IAAI,CAACK,QAAQ,EAAT,CAAV;;AAFR;AAAA;AAIQ,iBAAMP,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQ;AACAI,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAMV,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEF;AADA,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgBA;AACA;;;AACA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACG,MAAD,EAASV,KAAT,CAAhB;;AADJ;AAAA;AAEI,iBAAMS,IAAI,CAACC,MAAD,CAAV;;AAFJ;AAAA;AAGQ,iBAAMJ,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUT,SAAV;AAAA;AAAA;AAAA;AAAA;AACIa,UAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNH,UAAU,EADJ,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, call, take} from 'redux-saga/effects'\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\n\n/*\n\n로그인 관련 사가 제너레이터\n\n-사가 이펙트 정리-\nnext : 따로 작성할 필요없고 사가가 알아서 이펙트가 실행될 때 마다 해줌\ntake : 다른 사가를 기다림.\ntakeLatest :  해당 사가 실행완료 될때 까지 기다렸다가 액션 실행\nput: 사가의 dispatch\nfork :\ncall :\n*/\n\n//서버에 로그인 요청\nfunction loginApi() {\n\n}\n//로그인 액션 실행\nfunction* login() {\n    try{\n        yield call(loginApi());\n        //서버에 요청해서 성공하면 pit(distpach와 동일)\n        yield put({\n            type: LOG_IN_SUCCESS\n        })\n    }catch (e) {\n        //서버 요청 실패시\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE\n        })\n    }\n}\n\n//로그인이라는 액션을 기다리고\n//LOG_IN 이라는 타입으 액션이 실행될때까지 기다렸다가 login 함수 실\nfunction* watchLogin() {\n    yield takeLatest(LOG_IN, login)\n    yield take(LOG_IN),\n        yield put({\n            type: LOG_IN_SUCCESS\n        });\n}\n\nfunction* helloSaga() {\n    console.log('hello saga - login.js')\n}\nexport default function* userSaga() {\n    yield all([\n        watchLogin(),\n        //watchSignUp(),\n        //helloSaga(),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}