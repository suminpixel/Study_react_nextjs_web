{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n\n/*\n\ninitialState 란?\n해당 리덕스문서가 사용하는 스테이트 중앙 통제실\n웹을 대표하는 모든 상태값을 가지고 있음\n해당 스테이트 설계가 가장 중요\n\n*/\nvar dummyUser = {\n  nickname: '제로초',\n  Post: [],\n  //useEffect 더미데이터로 객체를 받는것은 좋은 습관은 아님.\n  Followings: [],\n  Followers: [],\n  id: 1\n};\nexport var initialState = {\n  isLoggedIn: false,\n  // 로그인 여부\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  signedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: '',\n  // 회원가입 실패 사유\n  me: null,\n  // 내 정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null // 남의 정보\n\n};\n/*\n 리듀서 삼종 세트\n REQUEST -  SUCCESS - FAILURE\n*/\n\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 액션의 이름\n\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\n\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\n\nexport var LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport var LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport var LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport var LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport var LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\nexport var FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport var FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport var FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport var UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport var UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport var UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport var REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport var REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport var REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    /*\n    로그인 \n    */\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: true,\n          logInErrorReason: ''\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: true,\n          me: action.data,\n          //로그인 성공했을때 데이터 받기(api callback)\n          isLoading: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          isLoggedIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    /*\n    로그아웃\n    */\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true,\n          isLoggedOut: false\n        });\n      }\n\n    case LOG_OUT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          isLoggedOut: true,\n          me: null\n        });\n      }\n\n    case LOG_OUT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          isLoggedOut: false,\n          logOutErrorReason: action.error\n        });\n      }\n\n    /*\n    회원가입\n    */\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false,\n          signUpErrorReason: ''\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          isSignedUp: true\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          signUpErrorReason: action.error\n        });\n      }\n\n    /*\n    유저 정보 받기\n    */\n\n    case LOAD_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: action.data\n        });\n      }\n\n    case LOAD_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","id","initialState","isLoggedIn","isLoggingOut","isLoggingIn","logInErrorReason","signedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","state","action","type","data","isLoading","error","isLoggedOut","logOutErrorReason","isSignedUp"],"mappings":"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","sourcesContent":["\n/*\n\ninitialState 란?\n해당 리덕스문서가 사용하는 스테이트 중앙 통제실\n웹을 대표하는 모든 상태값을 가지고 있음\n해당 스테이트 설계가 가장 중요\n\n*/\nconst dummyUser = {\n  nickname: '제로초',\n  Post: [], //useEffect 더미데이터로 객체를 받는것은 좋은 습관은 아님.\n  Followings: [],\n  Followers: [],\n  id: 1,\n};\n\nexport const initialState = {\n  isLoggedIn: false, // 로그인 여부\n  isLoggingOut: false, // 로그아웃 시도중\n  isLoggingIn: false, // 로그인 시도중\n  logInErrorReason: '', // 로그인 실패 사유\n  signedUp: false, // 회원가입 성공\n  isSigningUp: false, // 회원가입 시도중\n  signUpErrorReason: '', // 회원가입 실패 사유\n  me: null, // 내 정보\n  followingList: [], // 팔로잉 리스트\n  followerList: [], // 팔로워 리스트\n  userInfo: null, // 남의 정보\n};\n\n/*\n 리듀서 삼종 세트\n REQUEST -  SUCCESS - FAILURE\n*/\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 액션의 이름\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\n\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\n\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\n\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    /*\n    로그인 \n    */\n    case LOG_IN_REQUEST: {\n      return {\n        ...state,\n        isLoggingIn: true,\n        logInErrorReason: '',\n      };\n    }\n    case LOG_IN_SUCCESS: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: action.data, //로그인 성공했을때 데이터 받기(api callback)\n        isLoading: false,\n      };\n    }\n    case LOG_IN_FAILURE: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: false,\n        logInErrorReason: action.error,\n        me: null,\n      };\n    }\n    /*\n    로그아웃\n    */\n    case LOG_OUT_REQUEST: {\n      return {\n        ...state,\n        isLoggingOut: true,\n        isLoggedOut:false,\n      };\n    }\n    case LOG_OUT_SUCCESS: {\n      return {\n        ...state,\n        isLoggingOut: false,\n        isLoggedOut:true,\n        me: null,\n      };\n    }\n    case LOG_OUT_FAILURE: {\n      return {\n        ...state,\n        isLoggingOut: false,\n        isLoggedOut:false,\n        logOutErrorReason: action.error,\n      };\n    }\n    /*\n    회원가입\n    */\n    case SIGN_UP_REQUEST: {\n      return {\n        ...state,\n        isSigningUp: true,\n        isSignedUp: false,\n        signUpErrorReason: '',\n      };\n    }\n    case SIGN_UP_SUCCESS: {\n      return {\n        ...state,\n        isSigningUp: false,\n        isSignedUp: true,\n      };\n    }\n    case SIGN_UP_FAILURE: {\n      return {\n        ...state,\n        isSigningUp: false,\n        signUpErrorReason: action.error,\n      };\n    }\n    /*\n    유저 정보 받기\n    */\n    case LOAD_USER_REQUEST: {\n      return {\n        ...state,\n\n      };\n    }\n    case LOAD_USER_SUCCESS: {\n      return {\n        ...state,\n        me:action.data,\n      };\n    }\n    case LOAD_USER_FAILURE: {\n      return {\n        ...state,\n\n      };\n    }\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}