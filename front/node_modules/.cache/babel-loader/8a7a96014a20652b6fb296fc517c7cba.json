{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n/*\n\n-사가 yield 이펙트 정리-\nnext : 따로 작성할 필요없고 사가가 알아서 이펙트가 실행될 때 마다 해줌\ntake : 다른 사가를 기다림.\ntakeLatest :  해당 사가 실행완료 될때 까지 기다렸다가 액션 실행\nput: 사가의 dispatch\nfork : 함수를 실행해줌 (비동기호출)\ncall : 함수를 실행해줌 (동기 호출 ex)콜백 로직이 중요한 로그인 로직 )\n\n**\n 사가 구성 3종 세트\n api 콜 함수 - 실행(실제 동작) 함수 - watch 함수\n**\n\n*/\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof loginData); // 데이터타입 object 반환\n\n  console.log(\"saga -callapi : \" + _JSON$stringify(loginData)); //스트링 반환\n\n  return axios.post('//localhost:3065/api/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('saga - login() :' + action.type);\n          _context.next = 4;\n          return delay(2000);\n\n        case 4:\n          _context.next = 6;\n          return call(loginAPI, action.data);\n\n        case 6:\n          _context.next = 8;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n} //로그인이라는 액션을 기다리고\n//LOG_IN 이라는 타입으 액션이 실행될때까지 기다렸다가 login 함수 실행\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof signUpData); // 데이터타입 object 반환\n\n  console.log(\"saga -callapi : \" + _JSON$stringify(signUpData)); //스트링 반환\n\n  return axios.post('/user/', signUpData); //api 주소\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // yield call(signUpAPI);\n          console.log(\"saga -signup action : \" + action.type); //타입반환\n\n          console.log(\"saga -signup action : \" + action.data);\n          _context3.next = 5;\n          return call(signUpAPI, action.data);\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            // put = dispatch\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","loginData","console","log","post","withCredentials","action","type","data","error","signUpAPI","signUpData"],"mappings":";;;;;yBA4CUA,K;;;yBAiBAC,U;;;yBAWAC,M;;;yBAoBAC,W;;;yBAKeC,Q;;AAjGzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,EAUEC,eAVF,EAWEC,eAXF,EAYEC,eAZF,QAaO,kBAbP;AAcA;;;;;;;;;;;;;;;;;AAkBA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,OAAOF,SAAxC,EAF2B,CAE0B;;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,gBAAeF,SAAf,CAAjC,EAH2B,CAGkC;;AAC7D,SAAOd,KAAK,CAACiB,IAAN,CAAW,iCAAX,EAA8CH,SAA9C,EAAyD;AAC9DI,IAAAA,eAAe,EAAE;AAD6C,GAAzD,CAAP;AAGD;;AAGD,SAAU/B,KAAV,CAAgBgC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIJ,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBG,MAAM,CAACC,IAAxC;AAFJ;AAGI,iBAAMrB,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMH,IAAI,CAACiB,QAAD,EAAWM,MAAM,CAACE,IAAlB,CAAV;;AAJJ;AAAA;AAKI,iBAAMxB,GAAG,CAAC;AAAE;AACVuB,YAAAA,IAAI,EAAEd;AADE,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQgB;AACZS,UAAAA,OAAO,CAACO,KAAR;AATJ;AAUI,iBAAMzB,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEhB;AADE,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAeA;AACA;;;AACA,SAAUhB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,SAAS,CAACU,cAAD,EAAiBlB,KAAjB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASoC,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,OAAOQ,UAAxC,EAF6B,CAEyB;;AACtDT,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,gBAAeQ,UAAf,CAAjC,EAH6B,CAGiC;;AAC9D,SAAOxB,KAAK,CAACiB,IAAN,CAAW,QAAX,EAAqBO,UAArB,CAAP,CAJ6B,CAIY;AAC1C;;AAED,SAAUnC,MAAV,CAAiB8B,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BG,MAAM,CAACC,IAA9C,EAJJ,CAIyD;;AACrDL,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BG,MAAM,CAACE,IAA9C;AALJ;AAMI,iBAAMzB,IAAI,CAAC2B,SAAD,EAAYJ,MAAM,CAACE,IAAnB,CAAV;;AANJ;AAAA;AAQI,iBAAMxB,GAAG,CAAC;AAAE;AACVuB,YAAAA,IAAI,EAAER;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWgB;AACZG,UAAAA,OAAO,CAACO,KAAR;AAZJ;AAaI,iBAAMzB,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEV,eADE;AAERY,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUhC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,iBAAMK,SAAS,CAACgB,eAAD,EAAkBtB,MAAlB,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,UAAD,CADI,EAERK,IAAI,CAACH,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n} from '../reducers/user';\n/*\n\n-사가 yield 이펙트 정리-\nnext : 따로 작성할 필요없고 사가가 알아서 이펙트가 실행될 때 마다 해줌\ntake : 다른 사가를 기다림.\ntakeLatest :  해당 사가 실행완료 될때 까지 기다렸다가 액션 실행\nput: 사가의 dispatch\nfork : 함수를 실행해줌 (비동기호출)\ncall : 함수를 실행해줌 (동기 호출 ex)콜백 로직이 중요한 로그인 로직 )\n\n**\n 사가 구성 3종 세트\n api 콜 함수 - 실행(실제 동작) 함수 - watch 함수\n**\n\n*/\n\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof(loginData)); // 데이터타입 object 반환\n  console.log(\"saga -callapi : \" + JSON.stringify(loginData)); //스트링 반환\n  return axios.post('//localhost:3065/api/user/login', loginData, {\n    withCredentials: true,\n  });\n}\n\n\nfunction* login(action) {\n  try {\n    console.log('saga - login() :' + action.type);\n    yield delay(2000);\n    yield call(loginAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n    });\n  }\n}\n//로그인이라는 액션을 기다리고\n//LOG_IN 이라는 타입으 액션이 실행될때까지 기다렸다가 login 함수 실행\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof(signUpData)); // 데이터타입 object 반환\n  console.log(\"saga -callapi : \" + JSON.stringify(signUpData)); //스트링 반환\n  return axios.post('/user/', signUpData); //api 주소\n}\n\nfunction* signUp(action) {\n\n  try {\n    // yield call(signUpAPI);\n    console.log(\"saga -signup action : \" + action.type); //타입반환\n    console.log(\"saga -signup action : \" + action.data);\n    yield call(signUpAPI, action.data); //sinUpAPI함수에 action.data를 인자로 넣는다.\n    //throw new Error('에러!'); //일부러 에러내기\n    yield put({ // put = dispatch\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}