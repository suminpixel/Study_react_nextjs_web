{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n\n/*\n\n해당 리덕스문서가 사용하는 스테이트 중앙 통제실\n웹을 대표하는 모든 상태값을 가지고 있음\n설계가 가장 중요\n\n*/\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글',\n    img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n    Comments: []\n  }],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n};\nvar dummyPost = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  content: '나는 더미입니다.',\n  Comments: []\n};\nvar dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  createdAt: new Date(),\n  content: '더미 댓글입니다.'\n}; //메인포스트 로딩\n\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE'; //해시태그 검사 결과 로딩\n\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE'; //사용자 포스트 로딩\n\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; //이미지만 따로 로딩\n\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; //이미지 업로드 취소\n\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE'; //포스트 작성\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; //포스트 좋아요\n\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; //포스트 안좋아요\n\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; //포스트 댓글\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //코맨트 불러오기\n\nexport var LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport var LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport var LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE'; //리트윗\n\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE'; //포스트 삭제\n\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n        var post = state.mainPosts[postIndex];\n        var Comments = [].concat(_toConsumableArray(post.Comments), [dummyComment]);\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments: Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts: mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","Comments","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","dummyPost","dummyComment","createdAt","Date","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","state","action","type","error","postIndex","findIndex","v","data","postId","post"],"mappings":"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","sourcesContent":["/*\n\n해당 리덕스문서가 사용하는 스테이트 중앙 통제실\n웹을 대표하는 모든 상태값을 가지고 있음\n설계가 가장 중요\n\n*/\nexport const initialState = {\n   mainPosts: [{\n      id: 1,\n      User: {\n         id: 1,\n         nickname: '제로초',\n      },\n      content: '첫 번째 게시글',\n      img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n      Comments: [],\n   }], // 화면에 보일 포스트들\n   imagePaths: [], // 미리보기 이미지 경로\n   addPostErrorReason: '', // 포스트 업로드 실패 사유\n   isAddingPost: false, // 포스트 업로드 중\n   postAdded: false, // 포스트 업로드 성공\n   isAddingComment: false,\n   addCommentErrorReason: '',\n   commentAdded: false,\n};\n\nconst dummyPost = {\n   id: 2,\n   User: {\n      id: 1,\n      nickname: '제로초',\n   },\n   content: '나는 더미입니다.',\n   Comments: [],\n};\n\nconst dummyComment = {\n   id: 1,\n   User: {\n      id: 1,\n      nickname: '제로초',\n   },\n   createdAt: new Date(),\n   content: '더미 댓글입니다.',\n};\n\n//메인포스트 로딩\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\n//해시태그 검사 결과 로딩\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\n//사용자 포스트 로딩\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\n//이미지만 따로 로딩\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n//이미지 업로드 취소\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n//포스트 작성\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n//포스트 좋아요\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n//포스트 안좋아요\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n//포스트 댓글\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n//코맨트 불러오기\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\n//리트윗\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n//포스트 삭제\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport default (state = initialState, action) => {\n   switch (action.type) {\n      case ADD_POST_REQUEST: {\n         return {\n            ...state,\n            isAddingPost: true,\n            addPostErrorReason: '',\n            postAdded: false,\n         };\n      }\n      case ADD_POST_SUCCESS: {\n         return {\n            ...state,\n            isAddingPost: false,\n            mainPosts: [dummyPost, ...state.mainPosts],\n            postAdded: true,\n         };\n      }\n      case ADD_POST_FAILURE: {\n         return {\n            ...state,\n            isAddingPost: false,\n            addPostErrorReason: action.error,\n         };\n      }\n      case ADD_COMMENT_REQUEST: {\n         return {\n            ...state,\n            isAddingComment: true,\n            addCommentErrorReason: '',\n            commentAdded: false,\n         };\n      }\n      case ADD_COMMENT_SUCCESS: {\n         const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n         const post = state.mainPosts[postIndex];\n         const Comments = [...post.Comments, dummyComment];\n         const mainPosts = [...state.mainPosts];\n         mainPosts[postIndex] = { ...post, Comments };\n         return {\n            ...state,\n            isAddingComment: false,\n            mainPosts,\n            commentAdded: true,\n         };\n      }\n      case ADD_COMMENT_FAILURE: {\n         return {\n            ...state,\n            isAddingComment: false,\n            addCommentErrorReason: action.error,\n         };\n      }\n      default: {\n         return {\n            ...state,\n         };\n      }\n   }\n};"]},"metadata":{},"sourceType":"module"}