{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS } from '../reducers/post';\n/*\n 사가 구성 3종 세트\n api 콜 함수 - 실행(실제 동작) 함수 - watch 함수\n*/\n\naxios.default.baseURL = 'http://localhost:3065/api';\n\nfunction addPostAPI(postData) {\n  console.log('add post api: ' + postData); //유저정보 없음\n\n  return axios.post('//localhost:3065/api/post', postData, {\n    withCredentials: true //로그인한 사람만 작성 가능하므로 쿠키로 인증 필요\n\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('add post saga data: ' + action.data.content); //유저정보 없음\n\n          _context.next = 4;\n          return call(addPostAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n          console.log('watch add post '); //유저정보 없음\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction loadPoste() {}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","watchLoadPosts","postSaga","all","fork","takeLatest","put","delay","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","default","baseURL","addPostAPI","postData","console","log","post","withCredentials","action","data","content","result","type","error","addCommentAPI","postId","LOAD_POSTS_REQUEST","loadPosts","loadPoste"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call} from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST,\n    LOAD_MAIN_POSTS_SUCCESS,\n} from '../reducers/post';\n/*\n 사가 구성 3종 세트\n api 콜 함수 - 실행(실제 동작) 함수 - watch 함수\n*/\n\naxios.default.baseURL = 'http://localhost:3065/api';\n\nfunction addPostAPI(postData) {\n    console.log('add post api: '+ postData) ; //유저정보 없음\n    return axios.post('//localhost:3065/api/post', postData,{\n        withCredentials: true //로그인한 사람만 작성 가능하므로 쿠키로 인증 필요\n    })\n}\n\nfunction* addPost(action) {\n    try {\n        console.log('add post saga data: '+ action.data.content) ; //유저정보 없음\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n          type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) {\n        yield put({\n          type: ADD_POST_FAILURE,\n          error: e,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n    console.log('watch add post ') ; //유저정보 없음\n}\n\nfunction addCommentAPI() {\n\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n      },\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction loadPoste(){\n    \n}\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}