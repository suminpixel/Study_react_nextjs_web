{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n/*\n\n-사가 yield 이펙트 정리-\nnext : 따로 작성할 필요없고 사가가 알아서 이펙트가 실행될 때 마다 해줌\ntake : 다른 사가를 기다림.\ntakeLatest :  해당 사가 실행완료 될때 까지 기다렸다가 액션 실행\nput: 사가의 dispatch\nfork : 함수를 실행해줌 (비동기호출)\ncall : 함수를 실행해줌 (동기 호출 ex)콜백 로직이 중요한 로그인 로직 )\n\n**\n 사가 구성 3종 세트\n api 콜 함수 - 실행(실제 동작) 함수 - watch 함수\n**\n\n*/\n\n/*\n로그인\n*/\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof loginData); // 데이터타입 object 반환\n\n  console.log(\"saga -callapi : \" + _JSON$stringify(loginData)); //스트링 반환\n\n  return axios.post('//localhost:3065/api/user/login', loginData, {\n    withCredentials: true //!!! 쿠키를 받기 위해 반드시 세팅해야\n\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('saga - login() :' + action.type);\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return call(loginAPI, action.data);\n\n        case 6:\n          result = _context.sent;\n          _context.next = 9;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data // result 내부에 있는 데이터\n\n          });\n\n        case 9:\n          _context.next = 16;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 16;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n} //로그인이라는 액션을 기다리고\n//LOG_IN 이라는 타입으 액션이 실행될때까지 기다렸다가 login 함수 실행\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n/*\n회원가입\n*/\n\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof signUpData); // 데이터타입 object 반환\n\n  console.log(\"saga -callapi : \" + _JSON$stringify(signUpData)); //스트링 반환\n\n  return axios.post('http://localhost:3065/api/user/', signUpData); //api 주소\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          // yield call(signUpAPI);\n          console.log(\"saga -signup action : \" + action.type); //타입반환\n\n          console.log(\"saga -signup action : \" + action.data);\n          _context4.next = 5;\n          return call(signUpAPI, action.data);\n\n        case 5:\n          _context4.next = 7;\n          return put({\n            // put = dispatch\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 7:\n          _context4.next = 14;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context4.t0);\n          _context4.next = 14;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context4.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n}\n/*\n로그아웃\n*/\n\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction logout(action) {\n  var _result;\n\n  return _regeneratorRuntime.wrap(function logout$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          console.log('saga - login() :' + action.type);\n          _context6.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context6.next = 6;\n          return call(logoutAPI, action.data);\n\n        case 6:\n          _result = _context6.sent;\n          _context6.next = 9;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS,\n            data: _result.data // result 내부에 있는 데이터\n\n          });\n\n        case 9:\n          _context6.next = 16;\n          break;\n\n        case 11:\n          _context6.prev = 11;\n          _context6.t0 = _context6[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context6.t0);\n          _context6.next = 16;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 16:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 11]]);\n}\n\nfunction logoutAPI() {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : logout\");\n  return axios.post('//localhost:3065/api/user/logout', {}, {\n    //데이터가 없어도 빈갯\n    withCredentials: true //!!! 쿠키를 받기 위해 반드시 세팅해야\n\n  });\n}\n/*\n쿠키를 통해 유저정보 불러오기\n*/\n\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction loadUser(action) {\n  var _result2;\n\n  return _regeneratorRuntime.wrap(function loadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          console.log(\"saga -callapi : loadUser\");\n          _context8.next = 4;\n          return call(loadUserAPI, action.data);\n\n        case 4:\n          _result2 = _context8.sent;\n          _context8.next = 7;\n          return put({\n            // put = dispatch\n            type: LOAD_USER_SUCCESS,\n            data: _result2.data\n          });\n\n        case 7:\n          console.log(_result2.data);\n          _context8.next = 15;\n          break;\n\n        case 10:\n          _context8.prev = 10;\n          _context8.t0 = _context8[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context8.t0);\n          _context8.next = 15;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context8.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 10]]);\n}\n\nfunction loadUserAPI() {\n  return axios.get('http://localhost:3065/api/user/', {\n    withCredentials: true // 쿠키를 받기 위\n\n  }); //get은 데이터를 보내지 않음\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/sagas/user.js"],"names":["login","watchLogin","watchSignUp","signUp","watchLogout","logout","watchLoadUser","loadUser","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","loginData","console","log","post","withCredentials","action","type","data","result","error","signUpAPI","signUpData","logoutAPI","loadUserAPI","get"],"mappings":";;;;;yBA8CUA,K;;;yBAkBAC,U;;;yBAQAC,W;;;yBAUAC,M;;;yBAyBAC,W;;;yBAIAC,M;;;yBA4BAC,a;;;yBAIAC,Q;;;yBA0BeC,Q;;AAzKzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,EAUEC,eAVF,EAWEC,eAXF,EAYEC,eAZF,QAaO,kBAbP;AAcA;;;;;;;;;;;;;;;;;AAiBA;;;;AAGA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,OAAOF,SAAxC,EAF2B,CAE0B;;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,gBAAeF,SAAf,CAAjC,EAH2B,CAGkC;;AAC7D,SAAOd,KAAK,CAACiB,IAAN,CAAW,iCAAX,EAA8CH,SAA9C,EAAyD;AAC9DI,IAAAA,eAAe,EAAE,IAD6C,CACvC;;AADuC,GAAzD,CAAP;AAGD;;AAGD,SAAUnC,KAAV,CAAgBoC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIJ,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBG,MAAM,CAACC,IAAxC;AAFJ;AAGI,iBAAMrB,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAImB,iBAAMH,IAAI,CAACiB,QAAD,EAAWM,MAAM,CAACE,IAAlB,CAAV;;AAJnB;AAIUC,UAAAA,MAJV;AAAA;AAKI,iBAAMzB,GAAG,CAAC;AAAE;AACVuB,YAAAA,IAAI,EAAEd,cADE;AAERe,YAAAA,IAAI,EAAEC,MAAM,CAACD,IAFL,CAEU;;AAFV,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASgB;AACZN,UAAAA,OAAO,CAACQ,KAAR;AAVJ;AAWI,iBAAM1B,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEhB;AADE,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgBA;AACA;;;AACA,SAAUpB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMW,SAAS,CAACU,cAAD,EAAiBtB,KAAjB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;AAGA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMU,SAAS,CAACgB,eAAD,EAAkBzB,MAAlB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAASsC,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,OAAOS,UAAxC,EAF6B,CAEyB;;AACtDV,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,gBAAeS,UAAf,CAAjC,EAH6B,CAGiC;;AAC9D,SAAOzB,KAAK,CAACiB,IAAN,CAAW,iCAAX,EAA8CQ,UAA9C,CAAP,CAJ6B,CAIqC;AACnE;;AAED,SAAUvC,MAAV,CAAiBiC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BG,MAAM,CAACC,IAA9C,EAJJ,CAIyD;;AACrDL,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BG,MAAM,CAACE,IAA9C;AALJ;AAMI,iBAAMzB,IAAI,CAAC4B,SAAD,EAAYL,MAAM,CAACE,IAAnB,CAAV;;AANJ;AAAA;AAQI,iBAAMxB,GAAG,CAAC;AAAE;AACVuB,YAAAA,IAAI,EAAER;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWgB;AACZG,UAAAA,OAAO,CAACQ,KAAR;AAZJ;AAaI,iBAAM1B,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEV,eADE;AAERa,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;;;;;AAGA,SAAUpC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,SAAS,CAACa,eAAD,EAAkBpB,MAAlB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUA,MAAV,CAAiB+B,MAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIJ,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBG,MAAM,CAACC,IAAxC;AAFJ;AAGI,iBAAMrB,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAImB,iBAAMH,IAAI,CAAC8B,SAAD,EAAYP,MAAM,CAACE,IAAnB,CAAV;;AAJnB;AAIUC,UAAAA,OAJV;AAAA;AAKI,iBAAMzB,GAAG,CAAC;AAAE;AACVuB,YAAAA,IAAI,EAAEX,eADE;AAERY,YAAAA,IAAI,EAAEC,OAAM,CAACD,IAFL,CAEU;;AAFV,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASgB;AACZN,UAAAA,OAAO,CAACQ,KAAR;AAVJ;AAWI,iBAAM1B,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEb;AADE,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASmB,SAAT,GAAqB;AACnB;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,SAAOhB,KAAK,CAACiB,IAAN,CAAW,kCAAX,EAA+C,EAA/C,EAAmD;AAAC;AACzDC,IAAAA,eAAe,EAAE,IADuC,CACjC;;AADiC,GAAnD,CAAP;AAGD;AACD;;;;;AAIA,SAAU7B,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,SAAS,CAACO,iBAAD,EAAoBZ,QAApB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUA,QAAV,CAAmB6B,MAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIJ,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAFJ;AAGmB,iBAAMpB,IAAI,CAAC+B,WAAD,EAAcR,MAAM,CAACE,IAArB,CAAV;;AAHnB;AAGUC,UAAAA,QAHV;AAAA;AAKI,iBAAMzB,GAAG,CAAC;AAAE;AACVuB,YAAAA,IAAI,EAAEjB,iBADE;AAERkB,YAAAA,IAAI,EAAEC,QAAM,CAACD;AAFL,WAAD,CAAT;;AALJ;AASIN,UAAAA,OAAO,CAACC,GAAR,CAAYM,QAAM,CAACD,IAAnB;AATJ;AAAA;;AAAA;AAAA;AAAA;AAUgB;AACZN,UAAAA,OAAO,CAACQ,KAAR;AAXJ;AAYI,iBAAM1B,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEnB,iBADE;AAERsB,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASI,WAAT,GAAuB;AACnB,SAAO3B,KAAK,CAAC4B,GAAN,CAAU,iCAAV,EAA6C;AAChDV,IAAAA,eAAe,EAAE,IAD+B,CAC1B;;AAD0B,GAA7C,CAAP,CADmB,CAGf;AACP;;AAGD,eAAe,SAAU3B,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACT,UAAD,CADI,EAERS,IAAI,CAACN,WAAD,CAFI,EAGRM,IAAI,CAACJ,aAAD,CAHI,EAIRI,IAAI,CAACR,WAAD,CAJI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n} from '../reducers/user';\n/*\n\n-사가 yield 이펙트 정리-\nnext : 따로 작성할 필요없고 사가가 알아서 이펙트가 실행될 때 마다 해줌\ntake : 다른 사가를 기다림.\ntakeLatest :  해당 사가 실행완료 될때 까지 기다렸다가 액션 실행\nput: 사가의 dispatch\nfork : 함수를 실행해줌 (비동기호출)\ncall : 함수를 실행해줌 (동기 호출 ex)콜백 로직이 중요한 로그인 로직 )\n\n**\n 사가 구성 3종 세트\n api 콜 함수 - 실행(실제 동작) 함수 - watch 함수\n**\n\n*/\n\n/*\n로그인\n*/\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof(loginData)); // 데이터타입 object 반환\n  console.log(\"saga -callapi : \" + JSON.stringify(loginData)); //스트링 반환\n  return axios.post('//localhost:3065/api/user/login', loginData, {\n    withCredentials: true, //!!! 쿠키를 받기 위해 반드시 세팅해야\n  });\n}\n\n\nfunction* login(action) {\n  try {\n    console.log('saga - login() :' + action.type);\n    yield delay(1000);\n    const result = yield call(loginAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data // result 내부에 있는 데이터\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n    });\n  }\n}\n//로그인이라는 액션을 기다리고\n//LOG_IN 이라는 타입으 액션이 실행될때까지 기다렸다가 login 함수 실행\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\n\n/*\n회원가입\n*/\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : \" + typeof(signUpData)); // 데이터타입 object 반환\n  console.log(\"saga -callapi : \" + JSON.stringify(signUpData)); //스트링 반환\n  return axios.post('http://localhost:3065/api/user/', signUpData); //api 주소\n}\n\nfunction* signUp(action) {\n\n  try {\n    // yield call(signUpAPI);\n    console.log(\"saga -signup action : \" + action.type); //타입반환\n    console.log(\"saga -signup action : \" + action.data);\n    yield call(signUpAPI, action.data); //sinUpAPI함수에 action.data를 인자로 넣는다.\n    //throw new Error('에러!'); //일부러 에러내기\n    yield put({ // put = dispatch\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\n\n\n/*\n로그아웃\n*/\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction* logout(action) {\n  try {\n    console.log('saga - login() :' + action.type);\n    yield delay(1000);\n    const result = yield call(logoutAPI, action.data);\n    yield put({ // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS,\n      data: result.data // result 내부에 있는 데이터\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n    });\n  }\n}\n\nfunction logoutAPI() {\n  // 서버에 요청을 보내는 부분\n  console.log(\"saga -callapi : logout\");\n  return axios.post('//localhost:3065/api/user/logout', {}, {//데이터가 없어도 빈갯\n    withCredentials: true, //!!! 쿠키를 받기 위해 반드시 세팅해야\n  });\n}\n/*\n쿠키를 통해 유저정보 불러오기\n*/\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* loadUser(action) {\n  try {\n    console.log(\"saga -callapi : loadUser\");\n    const result = yield call(loadUserAPI, action.data); //sinUpAPI함수에 action.data를 인자로 넣는다.\n    //throw new Error('에러!'); //일부러 에러내기\n    yield put({ // put = dispatch\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n    console.log(result.data);\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction loadUserAPI() {\n    return axios.get('http://localhost:3065/api/user/', {\n        withCredentials: true // 쿠키를 받기 위\n    }); //get은 데이터를 보내지 않음\n}\n\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n    fork(watchLogout),\n    fork(watchLoadUser),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}