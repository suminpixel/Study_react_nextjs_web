{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar dummyUser = {\n  nickname: '제로초',\n  Post: [],\n  Followings: [],\n  Followers: [],\n  id: 1\n};\nexport var initialState = {\n  isLoggedIn: false,\n  // 로그인 여부\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  signedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpErrorReason: '',\n  // 회원가입 실패 사유\n  me: null,\n  // 내 정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null // 남의 정보\n\n}; //액션 이름 세팅\n\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT = 'LOG_OUT';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var SIGN_UP_REQUSET = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var signUpAction = function signUpAction(data) {\n  return {\n    type: SIGN_UP_REQUSET,\n    data: {}\n  };\n};\n/*\nexport const signUpSuccess = {\n    type: SIGN_UP_SUCCESS\n};\n\nexport const loginFailure = {\n    type: LOG_IN_FAILURE\n};\nexport const LoginSuccess = {\n    type: LOG_IN_SUCCESS\n};\n\nexport const loginAction = {\n    type: LOG_IN,\n    data: {\n        nickname: null\n    },\n};\n*/\n\nexport var logoutAction = {\n  type: LOG_OUT\n}; //리듀서 세\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : intialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        //만약 액션타입이 로그인 액션이면...\n        return _objectSpread({}, state, {\n          //다음스테이트를 이렇게 같이 세탕한다. 스프레드 문법 : 새 객체를 새ㅔㅇ성해야 불변성 이전 객체와 차이점을 알 수 있\n          isLoggedIn: true,\n          user: dummyUser,\n          loginData: ation.data //user: action.data,\n\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        //만약 액션타입이 로그아웃이면...\n        return _objectSpread({}, state, {\n          //다음스테이트를 이렇게 같이 세탕한\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return {\n          state: state\n        };\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/suminlee/PhpstormProjects/reactSNS/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","id","initialState","isLoggedIn","isLoggingOut","isLoggingIn","logInErrorReason","signedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUSET","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signUpAction","data","type","logoutAction","reducer","state","intialState","action","user","loginData","ation","SIGN_UP_REQUEST","signUpData"],"mappings":";AAAA,IAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,KADI;AAEdC,EAAAA,IAAI,EAAE,EAFQ;AAGdC,EAAAA,UAAU,EAAE,EAHE;AAIdC,EAAAA,SAAS,EAAE,EAJG;AAKdC,EAAAA,EAAE,EAAE;AALU,CAAlB;AAQA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,KADY;AACL;AACnBC,EAAAA,YAAY,EAAE,KAFU;AAEH;AACrBC,EAAAA,WAAW,EAAE,KAHW;AAGJ;AACpBC,EAAAA,gBAAgB,EAAE,EAJM;AAIF;AACtBC,EAAAA,QAAQ,EAAE,KALc;AAKP;AACjBC,EAAAA,WAAW,EAAE,KANW;AAMJ;AACpBC,EAAAA,iBAAiB,EAAE,EAPK;AAOD;AACvBC,EAAAA,EAAE,EAAE,IARoB;AAQd;AACVC,EAAAA,aAAa,EAAE,EATS;AASL;AACnBC,EAAAA,YAAY,EAAE,EAVU;AAUN;AAClBC,EAAAA,QAAQ,EAAE,IAXc,CAWR;;AAXQ,CAArB,C,CAcP;;AACA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAGP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAClC,SAAM;AACFC,IAAAA,IAAI,EAAEL,eADJ;AAEFI,IAAAA,IAAI,EAAG;AAFL,GAAN;AAMH,CAPM;AAQP;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAME,YAAY,GAAG;AACxBD,EAAAA,IAAI,EAAET;AADkB,CAArB,C,CAIP;;AACA,IAAMW,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBC,WAAwB;AAAA,MAAXC,MAAW;;AAC7C,UAAQA,MAAM,CAACL,IAAf;AAEI,SAAKZ,cAAL;AAAsB;AAAE;AACpB,iCACOe,KADP;AACc;AACV1B,UAAAA,UAAU,EAAE,IAFhB;AAGI6B,UAAAA,IAAI,EAAEpC,SAHV;AAIIqC,UAAAA,SAAS,EAAEC,KAAK,CAACT,IAJrB,CAKI;;AALJ;AAOH;;AACD,SAAKP,eAAL;AAAuB;AAAE;AACrB,iCACOW,KADP;AACc;AACV1B,UAAAA,UAAU,EAAE,KAFhB;AAGI6B,UAAAA,IAAI,EAAE;AAHV;AAKH;;AACD,SAAKG,eAAL;AAAuB;AACnB,iCACON,KADP;AAEIO,UAAAA,UAAU,EAAEL,MAAM,CAACN;AAFvB;AAIH;;AACD;AAAQ;AACJ,eAAO;AACHI,UAAAA,KAAK,EAALA;AADG,SAAP;AAGH;AA5BL;AA8BH,CA/BD;;AAiCA,eAAeD,OAAf","sourcesContent":["const dummyUser = {\n    nickname: '제로초',\n    Post: [],\n    Followings: [],\n    Followers: [],\n    id: 1,\n};\n\nexport const initialState = {\n    isLoggedIn: false, // 로그인 여부\n    isLoggingOut: false, // 로그아웃 시도중\n    isLoggingIn: false, // 로그인 시도중\n    logInErrorReason: '', // 로그인 실패 사유\n    signedUp: false, // 회원가입 성공\n    isSigningUp: false, // 회원가입 시도중\n    signUpErrorReason: '', // 회원가입 실패 사유\n    me: null, // 내 정보\n    followingList: [], // 팔로잉 리스트\n    followerList: [], // 팔로워 리스트\n    userInfo: null, // 남의 정보\n};\n\n//액션 이름 세팅\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\n\nexport const LOG_OUT = 'LOG_OUT';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\n\nexport const SIGN_UP_REQUSET = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\n\n\nexport const signUpAction = (data) => {\n    return{\n        type: SIGN_UP_REQUSET,\n        data : {\n\n        }\n    };\n};\n/*\nexport const signUpSuccess = {\n    type: SIGN_UP_SUCCESS\n};\n\nexport const loginFailure = {\n    type: LOG_IN_FAILURE\n};\nexport const LoginSuccess = {\n    type: LOG_IN_SUCCESS\n};\n\nexport const loginAction = {\n    type: LOG_IN,\n    data: {\n        nickname: null\n    },\n};\n*/\nexport const logoutAction = {\n    type: LOG_OUT\n};\n\n//리듀서 세\nconst reducer = (state = intialState, action) => {\n    switch (action.type) {\n\n        case LOG_IN_REQUEST : { //만약 액션타입이 로그인 액션이면...\n            return{\n                ...state, //다음스테이트를 이렇게 같이 세탕한다. 스프레드 문법 : 새 객체를 새ㅔㅇ성해야 불변성 이전 객체와 차이점을 알 수 있\n                isLoggedIn: true,\n                user: dummyUser,\n                loginData: ation.data\n                //user: action.data,\n            }\n        }\n        case LOG_OUT_REQUEST : { //만약 액션타입이 로그아웃이면...\n            return{\n                ...state, //다음스테이트를 이렇게 같이 세탕한\n                isLoggedIn: false,\n                user: null,\n            }\n        }\n        case SIGN_UP_REQUEST : {\n            return {\n                ...state,\n                signUpData: action.data,\n            }\n        }\n        default:{\n            return {\n                state,\n            }\n        }\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}