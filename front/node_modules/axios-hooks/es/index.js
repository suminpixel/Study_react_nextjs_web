import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/esm/extends";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import React from 'react';
import DefaultAxios from 'axios';
import LRU from 'lru-cache';
var actions = {
  REQUEST_START: 'REQUEST_START',
  REQUEST_END: 'REQUEST_END'
};
var ssrPromises = [];
var cache = new LRU();
var axiosInstance = DefaultAxios;
export function configure(options) {
  if (options.axios) {
    axiosInstance = options.axios;
  }

  if (options.cache) {
    cache = options.cache;
  }
}
export function loadCache(data) {
  cache.load(data);
}
export function serializeCache() {
  return _serializeCache.apply(this, arguments);
}

function _serializeCache() {
  _serializeCache = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Promise.all(ssrPromises);

          case 2:
            ssrPromises.length = 0;
            return _context.abrupt("return", cache.dump());

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _serializeCache.apply(this, arguments);
}

function cacheAdapter(_x) {
  return _cacheAdapter.apply(this, arguments);
}

function _cacheAdapter() {
  _cacheAdapter = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee2(config) {
    var cacheKey, hit, response, responseForCache;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            cacheKey = JSON.stringify(config);
            hit = cache.get(cacheKey);

            if (!hit) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", hit);

          case 4:
            delete config.adapter;
            _context2.next = 7;
            return axiosInstance(config);

          case 7:
            response = _context2.sent;
            responseForCache = _extends({}, response);
            delete responseForCache.config;
            delete responseForCache.request;
            cache.set(cacheKey, responseForCache);
            return _context2.abrupt("return", response);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _cacheAdapter.apply(this, arguments);
}

function createInitialState(options) {
  return {
    loading: !options.manual
  };
}

function reducer(state, action) {
  var _extends2;

  switch (action.type) {
    case actions.REQUEST_START:
      return _extends({}, state, {
        loading: true
      });

    case actions.REQUEST_END:
      return _extends({}, state, {
        loading: false
      }, action.error ? {} : {
        data: action.payload.data
      }, (_extends2 = {}, _extends2[action.error ? 'error' : 'response'] = action.payload, _extends2));

    default:
      return state;
  }
}

function request(_x2, _x3) {
  return _request.apply(this, arguments);
}

function _request() {
  _request = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee3(config, dispatch) {
    var response;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            dispatch({
              type: actions.REQUEST_START
            });
            _context3.next = 4;
            return axiosInstance(config);

          case 4:
            response = _context3.sent;
            dispatch({
              type: actions.REQUEST_END,
              payload: response
            });
            _context3.next = 11;
            break;

          case 8:
            _context3.prev = 8;
            _context3.t0 = _context3["catch"](0);
            dispatch({
              type: actions.REQUEST_END,
              payload: _context3.t0,
              error: true
            });

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[0, 8]]);
  }));
  return _request.apply(this, arguments);
}

function executeRequestWithCache(config, dispatch) {
  request(_extends({}, config, {
    adapter: cacheAdapter
  }), dispatch);
}

function executeRequestWithoutCache(config, dispatch) {
  return request(config, dispatch);
}

export default function useAxios(config, options) {
  if (options === void 0) {
    options = {
      manual: false
    };
  }

  if (typeof config === 'string') {
    config = {
      url: config
    };
  }

  var _React$useReducer = React.useReducer(reducer, createInitialState(options)),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  if (typeof window === 'undefined') {
    ssrPromises.push(axiosInstance(_extends({}, config, {
      adapter: cacheAdapter
    })));
  }

  React.useEffect(function () {
    if (!options.manual) {
      executeRequestWithCache(config, dispatch);
    }
  }, [JSON.stringify(config)]);
  return [state, function (configOverride) {
    return executeRequestWithoutCache(_extends({}, config, configOverride), dispatch);
  }];
}